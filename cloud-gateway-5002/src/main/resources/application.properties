server.port=5002
#server.servlet.context-path=/${spring.application.name}

#gateway
#表明gateway开启服务注册和发现的功能，gateway为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务。
spring.cloud.gateway.discovery.locator.enabled=true
#讲请求路径的服务名改为小写
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#lb 请求默认会将服务名称去掉,只要重写过滤链即可，添加如下配置，覆盖默认



#routes这里就是配置路由，这个id注意不要重复
spring.cloud.gateway.routes[0].id=cloud-consumer-4006
#此配置的值就是注册到Nacos中服务提供者的spring.application.name的值,这里的lb其实就是loadbalance缩写
spring.cloud.gateway.routes[0].uri.=lb://cloud-consumer-4006
#断言，路由到以cloud-consumer-4006开头的所有接口方法，交给某一个微服务处理的时候使用的是转发
spring.cloud.gateway.routes[0].predicates[0]=Path=/cloud-consumer-4006/**
#spring.cloud.gateway.routes[0].predicates[1]=Path=/consumer/**
#跳过固定前缀,可以理解为前缀擦除,参数代表删除的前缀数量
#spring.cloud.gateway.routes[0].filters[0]=StripPrefix=0
#spring.cloud.gateway.routes[0].filters[1]=PreserveHostHeader=true
#spring.cloud.gateway.routes[0].filters[2]=PrefixPath=/cloud-consumer-4006

spring.cloud.gateway.routes[1].id=cloud-consumer-4003
#此配置的值就是注册到Nacos中服务提供者的spring.application.name的值,这里的lb其实就是loadbalance缩写
spring.cloud.gateway.routes[1].uri.=lb://cloud-consumer-4003
#断言，路由到以provider开头的所有接口方法，交给某一个微服务处理的时候使用的是转发
spring.cloud.gateway.routes[1].predicates[0]=Path=/cloud-consumer-4003/**
#spring.cloud.gateway.routes[1].predicates[1]=Path=/pay/**
#跳过固定前缀,可以理解为前缀擦除,参数代表删除的前缀数量
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=0